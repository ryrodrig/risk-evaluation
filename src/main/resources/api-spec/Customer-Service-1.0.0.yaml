openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: Customer Service API
    url: https://swagger-hub.corp.internal.citizensbank.com/virts/N100371/Customer-Service/1.0.0
info:
  description: |
    Customer Service API
  version: "1.0.0"
  title: Customer Service
tags:
  - name: customer
    description: Operations about Customer
    externalDocs:
      description: Customer Service
      url: http://localhost:8090/customer-service
paths:
  /customer:
    post:
      tags:
        - customer
      summary: Create Customer
      description: Customer Details.
      operationId: createCustomer
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        description: Created Customer object
        required: true
  /customer/createWithArray:
    post:
      tags:
        - customer
      summary: Creates list of Customers with given input array
      operationId: createCustomersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/CustomerArray'
  '/customer/{customerName}':
    get:
      tags:
        - customer
      summary: Get customer by user name
      operationId: getCustomerByName
      parameters:
        - name: customerName
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - customer
      summary: Updated customer
      description: Update Customer details.
      operationId: updateCustomer
      parameters:
        - name: customerName
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid Customer supplied
        '404':
          description: Customer not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
              # oneOf:  # validates value against exactly one of the subschemas.. In this case either student/general customer.
              #   - $ref: '#/components/schemas/Student'
              #   - $ref: '#/components/schemas/General'
              # discriminator:
              #   propertyName: customer_type
        description: Updated customer object
        required: true
    delete:
      tags:
        - customer
      summary: Delete customer
      description: Delete a customer record with name.
      operationId: deleteCustomer
      parameters:
        - name: customerName
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid customer supplied
        '404':
          description: Customer not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Customer:
      type: object
      required:
        - customer_type
        - firstName
        - dateOfBirth
        - ssn
        - address
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
          format: date
        email:
          type: string
        ssn:
          type: string
          minLength: 1
          maxLength: 9
        phone:
          type: string
        address:
          type: object
          required:
            - line1
            - zipcode
          properties:
            line1:
              type: string
            line2:
              type: string
            zipcode:
              type: string
        customer_type:
          type: string
          enum: [ STUDENT, GENERAL ]
      discriminator: # discriminator field to determine the subschema to use.
        propertyName: customer_type
        # since open-api does not support one-of , below is work around.
        mapping:
          'STUDENT': '#/components/schemas/StudentCustomer'
          'GENERAL': '#/components/schemas/GeneralCustomer'
      xml:
        name: Customer
    StudentCustomer: # "Student" is the value for the customer_type property ( the discriminator value )
      allOf: # Combines the main 'Customer' schema with 'Student' specific properties.
        - $ref: '#/components/schemas/Customer'
        - type: object
          required:
            - university
          properties:
            university:
              type: string
    GeneralCustomer: # "General" is the value for the customer_type property ( the discriminator value )
      allOf: # Combines the main 'Customer' schema with 'General' specific properties.
        - $ref: '#/components/schemas/Customer'
        - type: object
          required:
            - employed
          properties:
            employed:
              type: boolean
            employerName:
              type: string
            salary:
              type: integer
  requestBodies:
    CustomerArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Customer'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header